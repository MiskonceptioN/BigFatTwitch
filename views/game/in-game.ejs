<%- include('../header'); %>
	<section id="game" class="text-center">
		<header>
			<h1 class="round-title">Round one</h1>
		</header>
		<% if (failureMessage) { %>
			<div class="container">
				<section>
					<div class="alert alert-danger" role="alert"><%= failureMessage %></div>
				</section>
			</div>
		<% } if (successMessage) { %>
			<div class="container">
				<section>
					<div class="alert alert-success" role="alert"><%= successMessage %></div>
				</section>
			</div>
		<% } %>
		<section>
					<form id="answer-form" method="post" action="/game/in-game" class="text-center">
		</section>
		<section>
			<!-- Try https://jsfiddle.net/hqb26mgd/11/ ? -->
			<!-- <div class="timer" style="--duration: 30;--size: 200;">
				<div class="mask"></div>
			</div> -->
		</section>
		<section>
			<form id="form" action="">
				<input id="input" autocomplete="off" /><button>Send</button>
			</form>
			<ul id="messages"></ul>
			<script>
			const form = document.getElementById('form');
			const input = document.getElementById('input');
			const messages = document.getElementById('messages');

			form.addEventListener('submit', (e) => {
				e.preventDefault();
				if (input.value) {
					socket.emit('chat message', input.value, <%- JSON.stringify(user) %>);
					input.value = '';
				}
			});

			</script>
		</section>
		<footer style="margin-top: 10em;">
			<h6>Made by <a href="https://www.twitch.tv/dannyvalz" target="_blank">Danny Valentine <img width="16" height="16" src="https://twitch.tv/favicon.ico"></a></h6>
		</footer>
    </section>
	<script src="/socket.io/socket.io.js"></script>
	<script src="/js/answerHandler.js"></script>
	<script>
	// console.log the user info for debugging
	console.log(<%- JSON.stringify(user) %>);

	// const socket = io();
	const socket = io({ query: { teamId: '<%= user.teamId %>' , role: '<%= user.role %>' } });

	socket.on('chat message', (msg) => {
		const item = document.createElement('li');
		item.innerHTML = msg;
		document.querySelector("#messages").appendChild(item);
		// document.querySelector("h2").appendChild(item);
		// window.scrollTo(0, document.body.scrollHeight);
	});

	socket.on('next question', (question, questionId) => {
		// console.log(question);
		resetFormFields();
		unlockFormFields();
		document.querySelector('h2').innerHTML = question;
		document.querySelector('#questionId').value = questionId;
		// restartAnimation();
	});

	socket.on('lock canvas', (question, questionId) => {
		console.log("Locking canvas");
		lockCanvas();
	});
	socket.on('unlock canvas', (question, questionId) => {
		console.log("Unlocking canvas");
		unlockCanvas();
	});

	socket.on('lock submit button', (question, questionId) => {
		console.log("Locking submit button");
		lockSubmitButton();
	});
	socket.on('unlock submit button', (question, questionId) => {
		console.log("Unlocking submit button");
		unlockSubmitButton();
	});

	socket.on("ltfo", (gameCode, playerId) => {
		if (playerId === "<%- user._id %>") {
			alert("You're being logged out.\nSucks to be youuuuu bish!");
			location.href = "/game/ltfo";
		}
	});

	socket.on('update canvas', (data, userID) => {
		// Only update serverCanvas if the data is not from the current user
		if (userID === <%- user.twitchId %>) return;
		
		// Update #serverCanvas with received data, and scale it down to 600x450
		const serverCanvas = document.getElementById('teammateAnswer');
		const ctx = serverCanvas.getContext('2d');
		const img = new Image();

		// Clear the canvas before importing the data
		ctx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);

		img.onload = () => {
			ctx.drawImage(img, 0, 0, 600, 450);
		}
		img.src = data;

	})

	const answerCanvas = document.getElementById('answerCanvas');
	const ctx = answerCanvas.getContext('2d');

	const canvasOffset = answerCanvas.getBoundingClientRect();
	const canvasOffsetX = answerCanvas.offsetLeft;
	const canvasOffsetY = answerCanvas.offsetTop;

	// answerCanvas.width = window.innerWidth - canvasOffsetX;
	// answerCanvas.height = window.innerHeight - canvasOffsetY;
	// answerCanvas.width = 800;
	// answerCanvas.height = 600;

	let isDrawing = false;
	let lastX = 0;
	let lastY = 0;

	let lastCanvasData = "";

    // Listen for mousedown then do the same for touchscreens
    $(answerCanvas).on('mousedown', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;

		if (e.which !== 1) return; // Check if it's the left mouse button only

        e.preventDefault();
        isDrawing = true;
        [lastX, lastY] = [e.offsetX, e.offsetY];
    });
    $(answerCanvas).on('touchstart', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;

		e.preventDefault();
        isDrawing = true;
        [lastX, lastY] = [e.touches[0].clientX - canvasOffsetX, e.touches[0].clientY - canvasOffsetY];
    });

    // Listen for mousemove then do the same for touchscreens
    $(answerCanvas).on('mousemove', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;

		if (isDrawing) {
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.lineWidth = 5;
            ctx.strokeStyle = 'black';
            ctx.lineCap = 'round';
            ctx.stroke();
            [lastX, lastY] = [e.offsetX, e.offsetY];
        }
    });
    $(answerCanvas).on('touchmove', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;
        if (isDrawing) {
            e.preventDefault();
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(e.touches[0].clientX - canvasOffsetX, e.touches[0].clientY - canvasOffsetY);
            ctx.lineWidth = 5;
            ctx.strokeStyle = 'black';
            ctx.lineCap = 'round';
            ctx.stroke();
            [lastX, lastY] = [e.touches[0].clientX - canvasOffsetX, e.touches[0].clientY - canvasOffsetY];
        }
    });

    $(answerCanvas).on('mouseup mouseout touchend touchcancel', function() {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;
        isDrawing = false

        // Send the image to the server
        const data = answerCanvas.toDataURL();
		if (lastCanvasData !== data) {
        	socket.emit('update canvas', data, <%- user.twitchId %>);
			lastCanvasData = data;
		}
    });
    // $(answerCanvas).on('mouseout', function() {
    //     isDrawing = false

    //     // Send the image to the server
    //     const data = answerCanvas.toDataURL();
    //     socket.emit('update canvas', data);
    // });
    // $(answerCanvas).on('touchend', function() {
    //     isDrawing = false

    //     // Send the image to the server
    //     const data = answerCanvas.toDataURL();
    //     socket.emit('update canvas', data);
    // });

    // $(answerCanvas).on('touchcancel', function() {
    //     isDrawing = false

    //     // Send the image to the server
    //     const data = answerCanvas.toDataURL();
    //     socket.emit('update canvas', data);
    // });

	function restartAnimation() {
		let circle = document.querySelector(".question");

		circle.style.animationName = "none";

		requestAnimationFrame(() => {
			setTimeout(() => {
				circle.style.animationName = ""
			}, 0);
		});
	}

	</script>
<%- include('../footer'); %>