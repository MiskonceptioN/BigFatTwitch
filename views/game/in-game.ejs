<%- include('../header'); %>
	<video
		autoplay
		muted
		loop
		id="ingame-background"
		class="team-<%- user.teamIndex %>"
		>
		<source src="https://assets.danny-valentine.com/video/upload/h_1080,e_accelerate:-50/q_auto,f_auto/BigFatTwitch/anibak.mov">
	</video>
	<section id="game" class="text-white">
		<header id="headings" class="text-center">
			<h1 class="round-title">Round one</h1>
			<h2 class="question" id="question-text"><%= (currentQuestion == "") ? "-" : currentQuestion %></h2>
		</header>
		<% if (failureMessage) { %>
			<div class="container">
				<section>
					<div class="alert alert-danger" role="alert"><%= failureMessage %></div>
				</section>
			</div>
		<% } if (successMessage) { %>
			<div class="container">
				<section>
					<div class="alert alert-success" role="alert"><%= successMessage %></div>
				</section>
			</div>
		<% } %>
		<section>
			<div class="row mt-4">
				<div class="col-9">
					<form id="answer-form" method="post" action="/game/in-game" class="text-center">
					<!-- <form method="post" action="https://webhook.site/1dfc56cf-8e6b-4332-bcdf-85f29abccc8a"> -->
						<canvas id="answerCanvas" class="canvas-container disabled" width="900" height="506" disabled></canvas><br>
						<input id="questionId" name="questionId" type="hidden">
						<input id="answerField" name="answerField" type="hidden">
						<input id="anotherAnswer" name="anotherAnswer" type="hidden" value="Sausages">
						<button class="btn btn-primary in-game w-100 mt-2" id="answer-button" type="submit" disabled>Submit answer</button>
					</form>
				</div>
				<div class="col-3 d-flex flex-column">
					<h4><%- user.teammate.displayName %>'s answer</h4>
					<img id="teammateAnswer" class="canvas-container" src="" style="height: auto;" />
					<h4 class="mt-4">Team chat</h4>
					<div class="chat-message-container chat-log w-100">
						<ul class="chat-messages list-unstyled"></ul>
					</div>
					<form id="form">
						<input id="input" type="text" class="in-game form-control mt-2" placeholder="Type a message..." autocomplete="off">
						<button class="btn btn-secondary in-game w-100 mt-2">Send</button>
					</form>
				</div>
			</div>
		</section>
		<section>
			<!-- Try https://jsfiddle.net/hqb26mgd/11/ ? -->
			<!-- <div class="timer" style="--duration: 30;--size: 200;">
				<div class="mask"></div>
			</div> -->
		</section>
		<script>
			const form = document.getElementById('form');
			const input = document.getElementById('input');

			form.addEventListener('submit', (e) => {
				e.preventDefault();
				if (input.value) {
					socket.emit('chat message', input.value, <%- JSON.stringify(user) %>);
					input.value = '';
				}
			});
		</script>
    </section>
	<script src="/socket.io/socket.io.js"></script>
	<script src="/js/answerHandler.js"></script>
	<script>
	// console.log the user info for debugging
	console.log(<%- JSON.stringify(user) %>);

	// const socket = io();
	const socket = io({ query: { teamId: '<%= user.teamId %>' , role: '<%= user.role %>' } });

	socket.on('chat message', (msg) => {
		const item = document.createElement('li');
		item.innerHTML = msg;
		const playerNameSpan = item.querySelector('span.chat-player-name');
		if (playerNameSpan && playerNameSpan.textContent === "<%- user.displayName %>") {
			item.classList.add('self');
		}
		document.querySelector(".chat-messages").appendChild(item);
		const chatMessageContainer = document.querySelector(".chat-message-container");
		chatMessageContainer.scrollTop = chatMessageContainer.scrollHeight;d
		// document.querySelector("h2").appendChild(item);
		// window.scrollTo(0, document.body.scrollHeight);
	});

	socket.on('next question', (question, questionId) => {
		// console.log(question);
		resetFormFields();
		unlockFormFields();
		document.querySelector('h2').innerHTML = question;
		document.querySelector('#questionId').value = questionId;
		// restartAnimation();
	});

	socket.on('lock canvas', (question, questionId) => {
		console.log("Locking canvas");
		lockCanvas();
	});
	socket.on('unlock canvas', (question, questionId) => {
		console.log("Unlocking canvas");
		unlockCanvas();
	});

	socket.on('lock submit button', (question, questionId) => {
		console.log("Locking submit button");
		lockSubmitButton();
	});
	socket.on('unlock submit button', (question, questionId) => {
		console.log("Unlocking submit button");
		unlockSubmitButton();
	});

	socket.on("ltfo", (gameCode, playerId) => {
		if (playerId === "<%- user._id %>") {
			alert("You're being logged out.\nSucks to be youuuuu bish!");
			location.href = "/game/ltfo";
		}
	});

	socket.on('update canvas', (canvasData, userID) => {
		// Only update serverCanvas if the canvasData is from the current user's teammate
		if (userID !== <%- user.teammate.twitchId %>) return;
		
		// Update #serverCanvas with received canvasData
		const serverCanvas = document.getElementById('teammateAnswer');
		serverCanvas.setAttribute("src", canvasData);
	})

	const answerCanvas = document.getElementById('answerCanvas');
	const ctx = answerCanvas.getContext('2d');

	const canvasOffset = answerCanvas.getBoundingClientRect();
	const canvasOffsetX = answerCanvas.offsetLeft;
	const canvasOffsetY = answerCanvas.offsetTop;

	// answerCanvas.width = window.innerWidth - canvasOffsetX;
	// answerCanvas.height = window.innerHeight - canvasOffsetY;
	// answerCanvas.width = 800;
	// answerCanvas.height = 600;

	let isDrawing = false;
	let lastX = 0;
	let lastY = 0;

	let lastCanvasData = "";

    // Listen for mousedown then do the same for touchscreens
    $(answerCanvas).on('mousedown', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;

		if (e.which !== 1) return; // Check if it's the left mouse button only

        e.preventDefault();
        isDrawing = true;
        [lastX, lastY] = [e.offsetX, e.offsetY];
    });
    $(answerCanvas).on('touchstart', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;

		e.preventDefault();
        isDrawing = true;
        [lastX, lastY] = [e.touches[0].clientX - canvasOffsetX, e.touches[0].clientY - canvasOffsetY];
    });

    // Listen for mousemove then do the same for touchscreens
    $(answerCanvas).on('mousemove', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;

		if (isDrawing) {
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.lineWidth = 5;
            ctx.strokeStyle = 'black';
            ctx.lineCap = 'round';
            ctx.stroke();
            [lastX, lastY] = [e.offsetX, e.offsetY];
        }
    });
    $(answerCanvas).on('touchmove', function(e) {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;
        if (isDrawing) {
            e.preventDefault();
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(e.touches[0].clientX - canvasOffsetX, e.touches[0].clientY - canvasOffsetY);
            ctx.lineWidth = 5;
            ctx.strokeStyle = 'black';
            ctx.lineCap = 'round';
            ctx.stroke();
            [lastX, lastY] = [e.touches[0].clientX - canvasOffsetX, e.touches[0].clientY - canvasOffsetY];
        }
    });

    $(answerCanvas).on('mouseup mouseout touchend touchcancel', function() {
		// Don't take any action if the canvas is disabled
		if ($(answerCanvas).hasClass("disabled")) return;
        isDrawing = false

        // Send the image to the server
        const data = answerCanvas.toDataURL();
		if (lastCanvasData !== data) {
        	socket.emit('update canvas', data, <%- user.twitchId %>);
			lastCanvasData = data;
		}
    });
	let originalCanvasData = null; // Store the original high-resolution canvas data

	$(window).on('resize', function() {
		const canvas = $('#answerCanvas')[0];
		const ctx = canvas.getContext('2d');
		const img = new Image();

		// Save the current canvas content at its original resolution if not already saved
		if (!originalCanvasData) {
			originalCanvasData = canvas.toDataURL();
		}

		// Adjust canvas size while maintaining 16:9 aspect ratio
		const parentWidth = $(canvas).parent().width();
		const newWidth = Math.min(parentWidth, 900); // Maximum width is 900
		const newHeight = newWidth * 9 / 16; // Maintain 16:9 aspect ratio

		canvas.width = newWidth;
		canvas.height = newHeight;

		// Redraw the saved high-resolution content onto the resized canvas
		img.onload = function() {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
		};
		img.src = originalCanvasData;
	}).trigger('resize');

	// Update the originalCanvasData whenever the user draws on the canvas
	$(answerCanvas).on('mouseup mouseout touchend touchcancel', function() {
		if (!$(answerCanvas).hasClass("disabled")) {
			originalCanvasData = answerCanvas.toDataURL();
		}
	});
    // $(answerCanvas).on('mouseout', function() {
    //     isDrawing = false

    //     // Send the image to the server
    //     const data = answerCanvas.toDataURL();
    //     socket.emit('update canvas', data);
    // });
    // $(answerCanvas).on('touchend', function() {
    //     isDrawing = false

    //     // Send the image to the server
    //     const data = answerCanvas.toDataURL();
    //     socket.emit('update canvas', data);
    // });

    // $(answerCanvas).on('touchcancel', function() {
    //     isDrawing = false

    //     // Send the image to the server
    //     const data = answerCanvas.toDataURL();
    //     socket.emit('update canvas', data);
    // });

	function restartAnimation() {
		let circle = document.querySelector(".question");

		circle.style.animationName = "none";

		requestAnimationFrame(() => {
			setTimeout(() => {
				circle.style.animationName = ""
			}, 0);
		});
	}

	</script>
<%- include('../footer'); %>