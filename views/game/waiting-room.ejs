<%- include('../header'); %>
<%
for (let i = 0; i < game.teams.length; i++) {
	if (game.teams[i].players.length > 0) {
		for (let j = 0; j < game.teams[i].players.length; j++) {
			if (game.teams[i].players[j].twitchId === user.twitchId) {
				user.teammate = game.teams[i].players[j == 0 ? 1 : 0];
			}
		}
	}
}
%>
	<video
		autoplay
		muted
		loop
		id="ingame-background"
		class="team-<%- user.teamIndex %>"
		>
		<source src="https://assets.danny-valentine.com/video/upload/h_1080,e_accelerate:-50/q_auto,f_auto/BigFatTwitch/anibak.mov">
	</video>
	<section id="game" class="text-center">
        <header>
            <h1 class="text-light">Waiting for game to begin</h1>
        </header>
		<% if (failureMessage) { %>
			<div class="container">
				<section>
					<div class="alert alert-danger" role="alert"><%= failureMessage %></div>
				</section>
			</div>
		<% } if (successMessage) { %>
			<div class="container">
				<section>
					<div class="alert alert-success" role="alert"><%= successMessage %></div>
				</section>
			</div>
		<% } %>
		<hr>
		<div class="container-fluid">
			<div class="row">
				<div class="col-lg-10">
					<div class="row">
						<section id="player-cards">
							<div class="row">
								<div class="col bg-white border border-dark ingame-border m-3 pt-3 pb-2">
									<div class="row">
										<div class="col d-flex align-items-center">
											<img class="<%- user.displayName %>-thumbnail player-icon <% if (user.inGame === game.code) { %>player-logged-in<% } else { %>player-logged-out<% } %>" src="<%- user.profileImageUrl %>" width="100" alt="<%- user.displayName %>'s thumbnail">
											<h3 class="ms-3 mb-0"><%- user.displayName %></h3>
										</div>
									</div>
									<div class="row text-start mt-3">
										<p><%- user.bio %></p>
									</div>
								</div>
								<div class="col bg-white border border-dark ingame-border m-3 pt-3 pb-2">
									<div class="row">
										<div class="col d-flex align-items-center">
											<img class="<%- user.teammate.displayName %>-thumbnail player-icon <% if (user.teammate.inGame === game.code) { %>player-logged-in<% } else { %>player-logged-out<% } %>" src="<%- user.teammate.profileImageUrl %>" width="100" alt="<%- user.teammate.displayName %>'s thumbnail">
											<h3 class="ms-3 mb-0"><%- user.teammate.displayName %></h3>
										</div>
									</div>
									<div class="row text-start mt-3">
										<p><%- user.teammate.bio %></p>
									</div>
								</div>
							</div>
						</section>
					</div>
					<div class="row">
						<section>
							<h3 class="text-start text-light mt-4">Team chat</h3>
							<div class="row">
								<div class="col bg-white border border-dark ingame-border m-3 mt-0 pt-3 pb-2 chat-message-container chat-log w-100 text-start">
									<ul class="chat-messages list-unstyled"></ul>
								</div>
							</div>
						</section>
					</div>
					<div class="row">
						<section>
							<form id="form">
								<div class="row mt-2">
									<div class="col-10 d-flex align-items-center">
										<input id="input" type="text" class="in-game form-control" placeholder="Type a message..." autocomplete="off" autofocus>
									</div>
									<div class="col-2 d-flex align-items-center">
										<button class="btn btn-secondary in-game w-100" type="submit">Send message <i class="fa-solid fa-paper-plane ps-2"></i></button>
									</div>
								</div>
							</form>
						</section>
					</div>
				</div>
				<div class="col-lg-2 bg-white border border-dark ingame-border mt-3 pt-3 pb-2 d-flex justify-content-center align-items-center">
					<div class="row">
						<div id="player-login-statuses" class="col">
							<% game.teams.forEach(team => { %>
								<div class="row">
									<h4 class="<% if (team !== game.teams[0]) { %>mt-3<% } %>"><span id="team-<%- team.id %>-name"><%- team.name %><% if (team.id === user.teamId) { %></span><i id="edit-team-name-button" class="fa-solid fa-pencil fa-2xs ms-2"></i><% } %> </h4>
									<% team.players.forEach(player => { %>
										<h5 class="d-flex justify-content-center align-items-center">
											<img src="<%- player.profileImageUrl %>" width="40" height="40" class="<%- player.displayName %>-thumbnail player-icon <% if (player.inGame) { %>player-logged-in<% } else { %>player-logged-out<% } %> me-1"> 
											<%- player.displayName %>
										</h5>
									<% }); %>
								</div>
							<% }); %>
							<div class="row mt-5">
								<!-- <h3 class="mt-5">Live players: <span class="live-players"><%- game.teams[0].players.length + game.teams[1].players.length %></span></h3> -->
								<h4><span class="live-players">1</span> of 6 players ready</h4>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="row text-light bg-dark my-5">
				<section>
					<%- include('carousel') %>
				</section>
			</div>
		</div>
	</section>
	<!-- Modal -->
	<div class="modal fade" id="teamNameModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h1 class="modal-title fs-5">Set team name</h1>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<form id="team-name-form">
					<div class="modal-body">
						<div class="mb-3">
							<input
								type="text"
								class="form-control"
								id="new-team-name"
								value="<%- user.teamName %>"
								placeholder="Enter team name"
								autocomplete="off"
								<!-- maxlength="50" -->
								<!-- pattern="[a-zA-Z0-9\s&\-!?\x22x27]*" -->
								<div class="invalid-feedback"></div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Dismiss</button>
						<button type="submit" class="btn btn-primary">Save changes</button>
					</div>
				</form>
			</div>
		</div>
	</div>
		
	<script>
		const editTeamNameButton = document.getElementById('edit-team-name-button');
		const teamNameElement = document.getElementById('team-<%- user.teamId %>-name');
		const newTeamNameInput = document.getElementById('new-team-name');

		editTeamNameButton.addEventListener('click', () => {
			// Make sure team name is not being edited by the teammate
			if (editTeamNameButton.classList.contains('text-danger')) {return}

			socket.emit("editing team name", "<%- user.teamId %>", true);
			newTeamNameInput.value = teamNameElement.innerText;
			const teamNameModal = new bootstrap.Modal(document.getElementById('teamNameModal'));
			const myInput = document.getElementById('new-team-name')
			teamNameModal.show();
		});
		editTeamNameButton.addEventListener('mouseover', () => {
			editTeamNameButton.classList.add('text-success');
			editTeamNameButton.style.cursor = 'pointer';
		});

		editTeamNameButton.addEventListener('mouseout', () => {
			editTeamNameButton.classList.remove('text-success');
		});

		teamNameModal.addEventListener('shown.bs.modal', () => {
			newTeamNameInput.focus();
		})
		teamNameModal.addEventListener('hidden.bs.modal', () => {
			newTeamNameInput.classList.remove('is-invalid');
			socket.emit("editing team name", "<%- user.teamId %>", false);
		});

		function setValidationFeedback(feedback) {
			const invalidFeedback = document.querySelector('.invalid-feedback');
			invalidFeedback.innerText = feedback;
			newTeamNameInput.classList.add('is-invalid');
		}

		const teamNameForm = document.getElementById('team-name-form');
		teamNameForm.addEventListener('submit', (e) => {
			
			e.preventDefault();
			const newTeamName = newTeamNameInput.value;
			const invalidFeedback = document.querySelector('.invalid-feedback');
			const regex = /^[a-zA-Z0-9\s&\-!?\x22\x27]*$/;

			if (newTeamName.length > 50) {
				newTeamNameInput.classList.add('is-invalid');
				invalidFeedback.innerText = 'Team name must be 50 characters or less.';
				return;
			}
			if (!regex.test(newTeamName)) {
				return setValidationFeedback('Team name can only contain letters, numbers, spaces, and the following characters: & - ! ? " \'');
			}
			if (newTeamName.length < 1) {
				newTeamNameInput.classList.add('is-invalid');
				invalidFeedback.innerText = 'Please enter a team name.';
				return;
			}

			socket.emit('change team name', newTeamName, "<%- user.teamId %>", "<%- game.code %>");
			const teamNameModal = bootstrap.Modal.getInstance(document.getElementById('teamNameModal'));
			teamNameModal.hide();
		});

		function shuffleArray (array)  { 
			for (let i = array.length - 1; i > 0; i--) { 
				const j = Math.floor(Math.random() * (i + 1)); 
				[array[i], array[j]] = [array[j], array[i]]; 
			} 
			return array; 
		}; 

		const form = document.getElementById('form');
		const input = document.getElementById('input');
		const messages = document.querySelector('.chat-messages');

		form.addEventListener('submit', (e) => {
			e.preventDefault();
			if (input.value) {
				socket.emit('chat message', input.value, <%- JSON.stringify(user) %>);
				input.value = '';
			}
		});

	</script>
	<%- include('../tipsCarousel'); %>
	<script src="/socket.io/socket.io.js"></script>
	<%- include('../helperFunctions'); %>
	<script>
	// Make sure .live-players accurately reflects the number of players waiting for the game to start
	setLivePlayersSpan(<%- JSON.stringify(game) %>);

	function setLivePlayersSpan(game) {
		let totalLivePlayers = 0;

		game.teams.forEach(team => {
			team.players.forEach(player => {
				if (player.inGame === game.code) {
					totalLivePlayers++;
				}
			});
		});

		const livePlayerSpan = document.querySelector(".live-players");
		livePlayerSpan.innerHTML = totalLivePlayers;
	}

	const socket = io({ query: { teamId: '<%= user.teamId %>' , role: '<%= user.role %>' } });

	<% if (chatLog) { chatLog.forEach((message) => { %> addChatMessage(".chat-messages", "<%- message %>");	<% }); } %>

	socket.on("update team name", (newTeamName, teamId) => {
		const teamNameElement = document.getElementById("team-" + teamId + "-name");
		teamNameElement.innerText = newTeamName;
	});
	socket.on("editing team name", (teamId, editing) => {
		const teamNameElement = document.getElementById("edit-team-name-button");
		if (editing) {
			teamNameElement.classList.add("text-danger");
		} else {
			teamNameElement.classList.remove("text-danger");
		}
	});

	socket.on('chat message', (msg) => {
		addChatMessage(".chat-messages", msg);
	});

	socket.on('player joined', (gameCode, user) => {
		if (gameCode === "<%- game.code %>") {
			const livePlayerCount = document.querySelector(".live-players");
			livePlayerCount.innerHTML = parseInt(livePlayerCount.innerHTML) + 1;

			const playerIcons = document.querySelectorAll("." + CSS.escape(user.displayName) + "-thumbnail");
			if (playerIcons) {
				playerIcons.forEach(playerIcon => {
					playerIcon.classList.remove("player-logged-out");
					playerIcon.classList.add("player-logged-in");
				})
			}
		}
	});

	socket.on('player left', (gameCode, user) => {
		if (gameCode === "<%- game.code %>") {
			const livePlayerCount = document.querySelector(".live-players");
			livePlayerCount.innerHTML = parseInt(livePlayerCount.innerHTML) - 1;

			// Check if recently left player is your teammate
			if (user.twitchId === "<%- user.teammate.twitchId %>") {
				const playerIcons = document.querySelectorAll("." + CSS.escape(user.displayName) + "-thumbnail");
				if (playerIcons) {
					playerIcons.forEach(playerIcon => {
						playerIcon.classList.remove("player-logged-in");
						playerIcon.classList.add("player-logged-out");
					})
				}
			}
		}
	});

	socket.on('start game', (gameCode) => {
		if (gameCode === "<%- game.code %>") {
			window.location.replace("/game/in-game");
		}
	});

	// Set the container in the header to be fluid
	$(".container").addClass("container-fluid");
	$(".container").removeClass("container");
	</script>
	<!-- <script src="js/ajaxFormHandler.js"></script> -->
<%- include('../footer'); %>